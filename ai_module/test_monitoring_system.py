#!/usr/bin/env python3
"""
Teste Completo do Sistema de Monitoramento
Valida logging estruturado, m√©tricas e health checks
"""

import time
import json
from datetime import datetime
import os

def test_monitoring_system():
    """Teste completo do sistema de monitoramento."""
    print("üîç TESTE COMPLETO DO SISTEMA DE MONITORAMENTO")
    print("=" * 60)
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 60)
    
    # Teste 1: Importa√ß√µes do sistema de monitoramento
    print("\nüîç 1. TESTANDO IMPORTA√á√ïES")
    print("-" * 40)
    
    try:
        from monitoring_system import (
            logger, metrics, health_checker, performance_monitor,
            log_prediction, log_model_load, get_monitoring_data,
            StructuredLogger, PerformanceMetrics, HealthChecker
        )
        print("  ‚úÖ Todas as importa√ß√µes do sistema de monitoramento")
        
        import psutil
        print(f"  ‚úÖ psutil {psutil.__version__}")
        
    except Exception as e:
        print(f"  ‚ùå Erro nas importa√ß√µes: {e}")
        return False
    
    # Teste 2: Logging estruturado
    print("\nüîç 2. TESTANDO LOGGING ESTRUTURADO")
    print("-" * 40)
    
    try:
        # Teste de diferentes n√≠veis de log
        logger.info("Teste de log informativo", 
                   test_type="structured_logging",
                   component="test_system")
        
        logger.warning("Teste de log de aviso", 
                      test_type="structured_logging",
                      component="test_system")
        
        logger.error("Teste de log de erro", 
                    test_type="structured_logging",
                    component="test_system")
        
        print("  ‚úÖ Logs estruturados em JSON funcionando")
        
        # Verifica se arquivo de log foi criado
        if os.path.exists('ai_service.log'):
            print("  ‚úÖ Arquivo de log criado com sucesso")
        else:
            print("  ‚ö†Ô∏è Arquivo de log n√£o encontrado")
        
    except Exception as e:
        print(f"  ‚ùå Erro no logging: {e}")
        return False
    
    # Teste 3: Sistema de m√©tricas
    print("\nüîç 3. TESTANDO SISTEMA DE M√âTRICAS")
    print("-" * 40)
    
    try:
        # Registra algumas m√©tricas de teste
        metrics.record_request('/api/test', 0.150, 200, False)
        metrics.record_request('/api/test', 0.200, 200, False)
        metrics.record_request('/api/test', 0.100, 500, True)
        
        # Registra m√©tricas de acur√°cia
        metrics.record_accuracy('test_model', 0.95)
        metrics.record_accuracy('test_model', 0.92)
        
        # Obt√©m m√©tricas compiladas
        compiled_metrics = metrics.get_metrics()
        
        print("  ‚úÖ M√©tricas de performance registradas")
        print(f"     - Endpoints: {len(compiled_metrics.get('performance', {}))}")
        print(f"     - Modelos: {len(compiled_metrics.get('accuracy', {}))}")
        
        if '/api/test' in compiled_metrics.get('performance', {}):
            test_metrics = compiled_metrics['performance']['/api/test']
            print(f"     - Tempo m√©dio: {test_metrics['avg_response_time_ms']}ms")
            print(f"     - Taxa de erro: {test_metrics['error_rate_percent']}%")
        
    except Exception as e:
        print(f"  ‚ùå Erro nas m√©tricas: {e}")
        return False
    
    # Teste 4: Health checks
    print("\nüîç 4. TESTANDO HEALTH CHECKS")
    print("-" * 40)
    
    try:
        # Executa todos os health checks
        health_results = health_checker.run_all_checks()
        
        print("  ‚úÖ Health checks executados")
        print(f"     - Status geral: {health_results['overall_status']}")
        print(f"     - Checks executados: {len(health_results.get('checks', {}))}")
        
        for check_name, result in health_results.get('checks', {}).items():
            status_icon = "‚úÖ" if result['status'] == 'healthy' else "‚ùå"
            print(f"     - {check_name}: {status_icon} {result['status']}")
        
    except Exception as e:
        print(f"  ‚ùå Erro nos health checks: {e}")
        return False
    
    # Teste 5: Decorator de performance
    print("\nüîç 5. TESTANDO DECORATOR DE PERFORMANCE")
    print("-" * 40)
    
    try:
        @performance_monitor('test_function')
        def test_function(delay=0.1):
            time.sleep(delay)
            return f"Fun√ß√£o executada com delay de {delay}s"
        
        # Executa fun√ß√£o decorada
        result = test_function(0.1)
        print(f"  ‚úÖ Decorator funcionando: {result}")
        
        # Verifica se m√©trica foi registrada
        new_metrics = metrics.get_metrics()
        if 'test_function' in new_metrics.get('performance', {}):
            print("  ‚úÖ M√©trica registrada pelo decorator")
        else:
            print("  ‚ö†Ô∏è M√©trica n√£o registrada pelo decorator")
        
    except Exception as e:
        print(f"  ‚ùå Erro no decorator: {e}")
        return False
    
    # Teste 6: Integra√ß√£o com AI Service (se dispon√≠vel)
    print("\nüîç 6. TESTANDO INTEGRA√á√ÉO COM AI SERVICE")
    print("-" * 40)
    
    try:
        from ai_service import app
        print("  ‚úÖ AI Service com monitoramento carregado")
        
        # Teste de fun√ß√µes de log espec√≠ficas
        log_prediction("test_product", 7, 0.95, True)
        log_model_load("test_product", True, False)
        
        print("  ‚úÖ Fun√ß√µes de log espec√≠ficas funcionando")
        
    except Exception as e:
        print(f"  ‚ùå Erro na integra√ß√£o: {e}")
        return False
    
    # Teste 7: Dados de monitoramento completos
    print("\nüîç 7. TESTANDO DADOS COMPLETOS")
    print("-" * 40)
    
    try:
        monitoring_data = get_monitoring_data()
        
        print("  ‚úÖ Dados de monitoramento completos:")
        print(f"     - M√©tricas: {'‚úÖ' if 'metrics' in monitoring_data else '‚ùå'}")
        print(f"     - Health: {'‚úÖ' if 'health' in monitoring_data else '‚ùå'}")
        print(f"     - Timestamp: {'‚úÖ' if 'timestamp' in monitoring_data else '‚ùå'}")
        
    except Exception as e:
        print(f"  ‚ùå Erro nos dados completos: {e}")
        return False
    
    # Teste 8: Verifica√ß√£o de arquivos
    print("\nüîç 8. VERIFICANDO ARQUIVOS IMPLEMENTADOS")
    print("-" * 40)
    
    required_files = [
        "monitoring_system.py",
        "monitoring_dashboard.html",
        "requirements.txt"
    ]
    
    for file in required_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} - AUSENTE")
    
    print("\n" + "=" * 60)
    print("üéâ TESTE DO SISTEMA DE MONITORAMENTO CONCLU√çDO")
    print("=" * 60)
    
    print("\nüìã RESUMO DA IMPLEMENTA√á√ÉO:")
    print("‚úÖ Logging estruturado em JSON implementado")
    print("‚úÖ Sistema de m√©tricas de performance ativo")
    print("‚úÖ Health checks robustos funcionando")
    print("‚úÖ Dashboard de monitoramento criado")
    print("‚úÖ Integra√ß√£o com AI Service completa")
    
    print("\nüöÄ FUNCIONALIDADES IMPLEMENTADAS:")
    print("üìä M√©tricas em tempo real de performance")
    print("üè• Health checks autom√°ticos para todos componentes")
    print("üìã Logs estruturados em formato JSON")
    print("üìà Dashboard web interativo")
    print("üîÑ Monitoramento autom√°tico com atualiza√ß√£o em tempo real")
    
    print("\nüí° COMO USAR:")
    print("1. Iniciar AI Service: python ai_service.py")
    print("2. Abrir dashboard: monitoring_dashboard.html")
    print("3. Acessar APIs de monitoramento:")
    print("   - GET /api/monitoring/health")
    print("   - GET /api/monitoring/metrics")
    print("   - GET /api/monitoring/dashboard")
    print("   - GET /api/monitoring/logs")
    
    return True

if __name__ == "__main__":
    success = test_monitoring_system()
    if success:
        print("\nüéØ SISTEMA DE MONITORAMENTO: ‚úÖ IMPLEMENTADO COM SUCESSO!")
    else:
        print("\n‚ùå FALHA NA IMPLEMENTA√á√ÉO DO MONITORAMENTO")